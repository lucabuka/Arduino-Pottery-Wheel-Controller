

#include <Arduino.h>
#include "LogModule.h"

/*
 *  SDFAT lib :  pio lib install 1432
 */


static char * ltrimInt(char *str);
static char * rtrimInt(char *str);
static char * trimInt(char *str);

static char maxLogFileNum = 10; // number of log file (after this -> rotate)
static char cntFile[] = "CNT.TXT"; // File containing current CNT
static char logFileBName[] = "LOG."; // Log file BASE name
static char logFileName[10] ; // String holding the calculated filename
										// ACHTUG!!!
										//  It should be wide enough to contains
										//  string BASE + CNT

static SdFat sd;
static SdFile file;

/**************************************************************************
 * Init SD lib
 *************************************************************************/
bool LOG_init(int cs_pin) {
	 // Initialize SdFat or print a detailed error message and halt
	 // Use half speed like the native library.
	 // change to SPI_FULL_SPEED for more performance
	if (!sd.begin(cs_pin, SPI_HALF_SPEED)) {
		sd.initErrorPrint(&Serial);
		return(1);
	}
	return(0);
}

/**************************************************************************
 * Load cntSuff from "cntFile" (or create cntFile)
 * Open Log file for writing
 *************************************************************************/
bool LOG_open() {
	char str[10];
	memset(str,0,10);

	setLogFileName(logFileName);

	if (! file.open(logFileName, O_RDWR | O_CREAT | O_TRUNC)) {
		sd.errorPrint("opening LOG FILE for write failed");
		return(1);
	}

	file.print("LogFile created on millis():");
	file.println(millis());
	file.sync();

	return(0);

}


/*
 *  Read CNT from file and returns CNT+1
 *  Save new CNT back to file
 */
static int getCntSuff(char * Fname){
	int retCnt = 0;
	if (!file.open(Fname, O_READ)) { // file not found (first run)
		retCnt = 0;
	} else { // read "cnt" string from the file (file contains just one str)
		char line[10];
		int n = file.fgets(line, sizeof(line)) ;
		if(n>0) { // file not empty
			int cnt = atoi(trimInt(line));
			retCnt = ++cnt;
			if(retCnt > maxLogFileNum) {
				retCnt = 0;
			}
		} else {
			retCnt = 0;
		}
		file.close();
Serial.print("New cnt (loaded from file and ++) :");
Serial.println(retCnt);
	}
	// Update CNT file content with new CNT value
	writeCntToFile(retCnt);

	return(retCnt);
}


/*
 *  Write into "Fname" the "rotated" LOG file name to be used 
 */
static char * setLogFileName(char * Fname){

	// Get CNT suff for LOG file to be created
	int cnt=getCntSuff(cntFile);

	// Open LOG file for writing
	char num[11];
	strcpy(Fname,logFileBName);
	// Warning: Non std itoa()
	// http://www.nongnu.org/avr-libc/user-manual/group__avr__stdlib.html
	strcat(Fname, itoa(cnt,num,10)); 

Serial.print("LogFIle:["); 
Serial.print(Fname);
Serial.println("]"); 
	return(Fname);
}


static bool writeCntToFile(int cnt){
	if (! file.open(cntFile, O_RDWR | O_CREAT | O_TRUNC)) {
		sd.errorPrint("opening CNT FILE for write failed");
		return(1);
	}

Serial.print("Printing cnt to file :");
Serial.println(cnt);

	file.println(cnt);
	file.close();

	return(0);

}








/****************************************************************************
 *		Ritorna il puntatore al primo carattere NUMERICO di str
 ****************************************************************************/
static char * ltrimInt(char *str) {
	char	*	s=str-1;
	while(*(++s)){
		if( (*s >= '0') && (*s) <= '9' ) {
			return(s);
		}
	}
	return(str);
}

/***************************************************************************
 *		Inserisce un FINE STRINGA ('\0') dopo l'ultimo carattere 
 *		numerico (0-9) della stringa
 ***************************************************************************/
static char * rtrimInt(char *str) {
	int	l=strlen(str);
	char	*	s=str+l;

	while( ( *(--s) <= '0') || (*s >= '9' )    ) {
		*s = '\0';
	}
	return(str);
}


static char * trimInt(char *str) {
	rtrimInt(str);
	ltrimInt(str);
}




/*************************************************************************
*************************************************************************/
void LOG_printDebugInfo(){

	File root = sd.open("/");

	printDirectory(root, 0);

	root.close();

	// Get CNT suff for LOG file to be created
	File file;
	if (file.open(cntFile, O_READ)) { 
		file.dmpFile(&Serial, 0, 10);	
	}

}


static void printDirectory(File dir, int numTabs) {

	while (true) {
		File entry =  dir.openNextFile();
		if (! entry) {
			// no more files
			break;
		}
		for (uint8_t i = 0; i < numTabs; i++) {
			Serial.print('\t');
		}
		Serial.print(entry.name());
		if (entry.isDirectory()) {
			Serial.println("/");
			printDirectory(entry, numTabs + 1);
		} else {
			// files have sizes, directories do not
			Serial.print("\t\t");
			Serial.println(entry.size(), DEC);
		}
		entry.close();
	}
}


